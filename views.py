import commands
from aiogram import html
from models import *
from rules import get_computer_status, Status
from cache import ComputerReservation, Status


status_symbol = {
    Status.free: 'üü¢',
    Status.lite_res: 'üü°',
    Status.hard_res: 'üü†',
    Status.work: 'üî¥',
    Status.broken: '‚ö´Ô∏è',
    Status.your: 'üîµ',
}

computer_reservation = ComputerReservation(Club.get(id=1))

def _get_computer_info(computer: Computer, sender: User) -> str:
    if computer.num > 9:
        number = f"‚Ññ{html.code(computer.num)}"
    else:
        number = f"‚Ññ{html.code(f'0{computer.num}')}"
    reservations: list[Reservation] = computer_reservation.reservations[computer.id]
    status = status_symbol[get_computer_status(computer, reservations, sender)]
    return f"{number} {status}"


def _get_room_info(room: Room, sender: User):
    computers = [c for c in room.computers]
    columns = {}
    for computer in computers:
        if computer.stack in columns:
            columns[computer.stack].append(computer)
        else:
            columns[computer.stack] = [computer]
    result = f"{html.bold(room.name)}\n"
    rows = []
    for i in range(max((len(columns[c]) for c in columns))):
        row: list[Computer] = []
        for c in columns:
            if i < len(columns[c]):
                row.append(columns[c][i])
        rows.append(row)
    for row in rows:
        result += "   ".join([_get_computer_info(comp, sender) for comp in row]) + "\n"
    return result


def get_club_info(club: Club, sender: User) -> str:
    rooms = Room.select().where(Room.club == club)
    return "\n".join([_get_room_info(room, sender) for room in rooms])


def confirm_reservation(request: Reservation) -> str:
    return (f"–ë—Ä–æ–Ω—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ‚Ññ{html.code(request.computer.num)}\n"
            f"–≤ {request.computer.room.name}\n"
            f"–Ω–∞ {request.start.strftime("%d.%m.%Y %H:%M")}\n"
            f"–í–µ—Ä–Ω–æ?")

def menu() -> str:
    return f"""
–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —É–∑–Ω–∞—Ç—å {html.code('/—Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞')} –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∫–ª—É–±–µ {html.code('/invite')}
–ï—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –∫—Ä–∏–Ω–∂–æ–≤–æ–µ –∏–º—è, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è {html.code('/—Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏')}
–ó–∞–ø—É—Ç–∞–ª—Å—è? –¢–æ–≥–¥–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç {html.code('/—Å–ø—Ä–∞–≤–∫–∞')}
"""

def club_info_help() -> str:
    return f"""
{html.code('/—Å–ø—Ä–∞–≤–∫–∞')}

üü¢ - {html.code('–ü–ö —Å–≤–æ–±–æ–¥–µ–Ω')}
üü° - {html.code('–ü–ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω (–±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞)')}
üü† - {html.code('–ü–ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω (–º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞)')}
üî¥ - {html.code('–ü–ö –∑–∞–Ω—è—Ç—å')}
‚ö´Ô∏è - {html.code('–ü–ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}
üîµ - {html.code('–ü–ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏')}
"""
